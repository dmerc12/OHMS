name: CI/CD Pipeline

on:
  push:
    branches:
      - main

  jobs:
    test-backend:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Set Up Python
          uses: actions/setup-python@v4
          with:
            python-version: 3.12

        - name: Install Dependencies
          run: |
            cd OHMS/back-end/
            python3 -m venv .venv
            source .venv/bin/activate
            python3 -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Run Tests With Coverage
          env:
            DEBUG: "True"
          run: |
            cd /OHMS/back-end/
            source .venv/bin/activate
            coverage run manage.py test
            coverage report --fail-under=80

    deploy-backend:
      needs: test-backend
      runs-on: ubuntu-latest
      env:
        AWS_INSTANCE_SG_ID: ${{ secrets.AWS_INSTANCE_SG_ID }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Get Runner IP Address
          id: ip
          uses: haythem/public-ip@v1

        - name: Whitelist Runner IP Address
          run: |
            aws ec2 authorize-security-group-ingress \
              --group-id $AWS_INSTANCE_SG_ID \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32

        - name: Deploy Backend
          env:
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            DEBUG: "False"
            ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_PORT: ${{ secrets.DB_PORT }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
            AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
            EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          run: |
            echo "${{ secrets.EC2_KEY }}" > d-macbook.pem
            chmod 600 d-macbook.pem

            ssh -o StrictHostKeyChecking=no -i d-macbook.pem ec2-user@${{ secrets.EC2_HOST }} << EOF
            cd OHMS/back-end/
            export SECRET_KEY=$SECRET_KEY
            export DEBUG=$DEBUG
            export ALLOWED_HOSTS=$ALLOWED_HOSTS
            export DB_NAME=$DB_NAME
            export DB_USER=$DB_USER
            export DB_PASSWORD=$DB_PASSWORD
            export DB_HOST=$DB_HOST
            export DB_PORT=$DB_PORT
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME
            export AWS_S3_REGION_NAME=$AWS_S3_REGION_NAME
            export EMAIL_ADDRESS=$EMAIL_ADDRESS

            docker-compose -f docker-compose.production.yml down
            docker-compose -f docker-compose.production.yml up -d --build
            EOF

        - name: Revoke Runner IP Address
          run: |
            aws ec2 revoke-security-group-ingress \
              --group-id $AWS_INSTANCE_SG_ID \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32

    deploy-frontends:
      needs: deploy-backend
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Build Frontend - Public
          env:
            VITE_API_URL: ${{ secrets.VITE_API_URL }}
          run: |
            cd OHMS/front-end/public/
            echo "VITE_API_URL=$VITE_API_URL" > .env
            npm install
            npm run build

        - name: Sync Public Frontend To S3
          run: |
            aws s3 sync OHMS/front-end/public/dist/ s3://ohms-public --delete
            aws cloudfront create-invalidation --distribution-id ${{ secrets.PUBLIC_CF_DIST_ID }} --paths "/*"

        - name: Build Frontend - Admin
          env:
            VITE_API_URL: ${{ secrets.VITE_API_URL }}
          run: |
            cd OHMS/front-end/admin/
            echo "VITE_API_URL=$VITE_API_URL" > .env
            npm install
            npm run build

        - name: Sync Admin Frontend To S3
          run: |
            aws s3 sync OHMS/front-end/admin/dist/ s3://ohms-admin --delete
            aws cloudfront create-invalidation --distribution-id ${{ secrets.ADMIN_CF_DIST_ID }} --paths "/*"
